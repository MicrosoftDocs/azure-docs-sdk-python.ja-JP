### YamlMime:Tutorial
title: <span data-ttu-id="929f7-101">Python 用 Azure ライブラリを使用したクラウド開発の開始</span><span class="sxs-lookup"><span data-stu-id="929f7-101">Get started with cloud development using the Azure libraries for Python</span></span>
metadata:
  title: Python 用 Azure ライブラリの概要
  description: Azure クラウド リソースを作成し、それらのリソースに接続して Python アプリケーションで使用する方法について説明します。
  audience: Developer
  level: Beginner
  nextTutorialHref: /python/api/overview/azure/?view=azure-python
  nextTutorialTitle: <span data-ttu-id="929f7-104">Python SDK リファレンス</span><span class="sxs-lookup"><span data-stu-id="929f7-104">python SDK reference</span></span>
  displayType: two-column
  interactive: azurecli
  ms.openlocfilehash: 23e29f3a4fde678e6b8973f3f7baca0f2afb1cde
  ms.sourcegitcommit: 5ab15a7214082d16f339a13e4ae7735b3a57a9aa
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/18/2018
  ms.locfileid: "27907932"
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"929f7-105\">このガイドでは、いくつかの Python 用 Azure ライブラリの使用方法について説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-105\">This guide demonstrates the usage of several Azure libraries for Python.</span></span>  \n"
- title: <span data-ttu-id="929f7-106">前提条件</span><span class="sxs-lookup"><span data-stu-id="929f7-106">Prerequisites</span></span>
  durationInMinutes: 5
  content: >
    - <span data-ttu-id="929f7-107">Azure アカウント。</span><span class="sxs-lookup"><span data-stu-id="929f7-107">An Azure account.</span></span> <span data-ttu-id="929f7-108">所有していない場合は、[無料試用版を入手](https://azure.microsoft.com/free/)してください。</span><span class="sxs-lookup"><span data-stu-id="929f7-108">If you don't have one, [get a free trial](https://azure.microsoft.com/free/).</span></span>

    - [<span data-ttu-id="929f7-109">Python</span><span class="sxs-lookup"><span data-stu-id="929f7-109">Python</span></span>](https://www.python.org/downloads/)

    - <span data-ttu-id="929f7-110">[Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/quickstart) または [Azure CLI 2.0](https://docs.microsoft.com/cli/azure/install-az-cli2)。</span><span class="sxs-lookup"><span data-stu-id="929f7-110">[Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/quickstart) or [Azure CLI 2.0](https://docs.microsoft.com/cli/azure/install-az-cli2).</span></span>
- title: <span data-ttu-id="929f7-111">認証の設定</span><span class="sxs-lookup"><span data-stu-id="929f7-111">Set up authentication</span></span>
  durationInMinutes: 5
  content: >
    > [!IMPORTANT]

    > <span data-ttu-id="929f7-112">これは、すばやく開始できる開発者エクスペリエンスとして使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="929f7-112">This should be used as quick start developer experience.</span></span> <span data-ttu-id="929f7-113">運用環境では、[ADAL](https://github.com/AzureAD/azure-activedirectory-library-for-python) か独自の資格情報システムを使用してください。</span><span class="sxs-lookup"><span data-stu-id="929f7-113">For production purposes, use [ADAL](https://github.com/AzureAD/azure-activedirectory-library-for-python) or your own credentials system.</span></span>

    > <span data-ttu-id="929f7-114">CLI 構成に変更を加えると、SDK の実行に影響します。</span><span class="sxs-lookup"><span data-stu-id="929f7-114">Any change to your CLI configuration will impact the SDK execution.</span></span>


    <span data-ttu-id="929f7-115">SDK では、CLI のアクティブなサブスクリプションを使用してクライアントを作成できます。</span><span class="sxs-lookup"><span data-stu-id="929f7-115">The SDK is able to create a client using your CLI active subscription.</span></span>


    <span data-ttu-id="929f7-116">アクティブな資格情報を定義するには、[az login](https://docs.microsoft.com/cli/azure/authenticate-azure-cli) を使用します。</span><span class="sxs-lookup"><span data-stu-id="929f7-116">To define active credentials, use [az login](https://docs.microsoft.com/cli/azure/authenticate-azure-cli).</span></span>

    <span data-ttu-id="929f7-117">既定のサブスクリプション ID は、1 つしかない場合はその値であり、そうでない場合は [az account](https://docs.microsoft.com/cli/azure/manage-azure-subscriptions-azure-cli) を使用して定義できます。</span><span class="sxs-lookup"><span data-stu-id="929f7-117">Default subscription ID is either the only one you have, or you can define it using [az account](https://docs.microsoft.com/cli/azure/manage-azure-subscriptions-azure-cli).</span></span>


    ```python

    from azure.common.client_factory import get_client_from_cli_profile

    from azure.mgmt.compute import ComputeManagementClient


    client = get_client_from_cli_profile(ComputeManagementClient)

    ```
- title: <span data-ttu-id="929f7-118">仮想環境の作成</span><span class="sxs-lookup"><span data-stu-id="929f7-118">Create a virtual environment</span></span>
  durationInMinutes: 5
  content: >
    > [!IMPORTANT]

    > <span data-ttu-id="929f7-119">仮想環境の作成は省略可能ですが、作成することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="929f7-119">Create a virtual environment is optional, but we strongly suggest you to do it.</span></span>


    <span data-ttu-id="929f7-120">Bash (Linux または [Bash for Windows](https://msdn.microsoft.com/commandline/wsl/about)) で仮想環境を作成します。</span><span class="sxs-lookup"><span data-stu-id="929f7-120">Create a virtual environment in Bash (Linux or [Bash for Windows](https://msdn.microsoft.com/commandline/wsl/about)):</span></span>

    ```bash

    pip install virtualenv

    virtualenv mytestenv

    cd mytestenv

    source ./bin/activate

    ```


    <span data-ttu-id="929f7-121">PowerShell での仮想環境の作成: </span><span class="sxs-lookup"><span data-stu-id="929f7-121">Create a virtual environment in PowerShell:</span></span>

    ```powershell

    pip install virtualenv

    virtualenv mytestenv

    cd mytestenv

    .\Scripts\activate

    ```
- title: <span data-ttu-id="929f7-122">Linux 仮想マシンの作成</span><span class="sxs-lookup"><span data-stu-id="929f7-122">Create a Linux virtual machine</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="929f7-123">このコードによって、米国東部 Azure リージョンで実行されるリソース グループ `sampleVmResourceGroup` に、`testLinuxVM` という名前の新しい Linux VM が作成されます。</span><span class="sxs-lookup"><span data-stu-id="929f7-123">This code creates a new Linux VM with name `testLinuxVM` in a resource group `sampleVmResourceGroup` running in the US East Azure region.</span></span>


    <span data-ttu-id="929f7-124">認証を行います。</span><span class="sxs-lookup"><span data-stu-id="929f7-124">Authenticate:</span></span>

    ```azcli

    az login

    ```

    <span data-ttu-id="929f7-125">リソース グループを作成します。</span><span class="sxs-lookup"><span data-stu-id="929f7-125">Create a resource group:</span></span>

    ```azurecli-interactive

    az group create -l eastus --n sampleVmResourceGroup

    ```


    <span data-ttu-id="929f7-126">仮想ネットワークとサブネットを作成します。</span><span class="sxs-lookup"><span data-stu-id="929f7-126">Create a virtual network and subnet:</span></span>

    ```azurecli-interactive

    az network vnet create -g sampleVmResourceGroup -n azure-sample-vnet --address-prefix 10.0.0.0/16 --subnet-name azure-sample-subnet --subnet-prefix 10.0.0.0/24

    ```


    <span data-ttu-id="929f7-127">パブリック IP アドレスを作成します。</span><span class="sxs-lookup"><span data-stu-id="929f7-127">Create a public IP address:</span></span>

    ```azurecli-interactive

    az network public-ip create -g sampleVmResourceGroup -n azure-sample-ip --allocation-method Dynamic --version IPv6

    ```

    <span data-ttu-id="929f7-128">ネットワーク インターフェイス クライアントを作成します。</span><span class="sxs-lookup"><span data-stu-id="929f7-128">Create a network interface client:</span></span>

    ```azurecli-interactive

    az network nic create -g sampleVmResourceGroup --vnet-name azure-sample-vnet --subnet azure-sample-subnet -n azure-sample-nic --public-ip-address azure-sample-ip

    ```


    ```python

    from azure.mgmt.network import NetworkManagementClient

    from azure.mgmt.compute import ComputeManagementClient

    from azure.common.client_factory import get_client_from_cli_profile


    # Azure Datacenter

    LOCATION = 'eastus'


    # Resource Group

    GROUP_NAME = 'sampleVmResourceGroup'


    # Network

    VNET_NAME = 'azure-sample-vnet'

    SUBNET_NAME = 'azure-sample-subnet'


    # VM

    NIC_NAME = 'azure-sample-nic'

    VM_NAME = 'testLinuxVM'


    USERNAME = 'userlogin'

    PASSWORD = 'Pa$$w0rd91'


    IP_ADDRESS_NAME='azure-sample-ip'


    VM_REFERENCE = {
        'linux': {
            'publisher': 'Canonical',
            'offer': 'UbuntuServer',
            'sku': '16.04.0-LTS',
            'version': 'latest'
        },
        'windows': {
            'publisher': 'MicrosoftWindowsServerEssentials',
            'offer': 'WindowsServerEssentials',
            'sku': 'WindowsServerEssentials',
            'version': 'latest'
        }
    }



    def run_example():

        compute_client = get_client_from_cli_profile(ComputeManagementClient)
        network_client = get_client_from_cli_profile(NetworkManagementClient)

        # get nic id
        nic = network_client.network_interfaces.get(GROUP_NAME, NIC_NAME)

        # Create Linux VM
        print('\nCreating Linux Virtual Machine')
        vm_parameters = create_vm_parameters(nic.id, VM_REFERENCE['linux'])
        print(vm_parameters)
        async_vm_creation = compute_client.virtual_machines.create_or_update(
            GROUP_NAME, VM_NAME, vm_parameters)
        async_vm_creation.wait()


    def create_vm_parameters(nic_id, vm_reference):
        """Create the VM parameters structure.
        """
        return {
            'location': LOCATION,
            'os_profile': {
                'computer_name': VM_NAME,
                'admin_username': USERNAME,
                'admin_password': PASSWORD
            },
            'hardware_profile': {
                'vm_size': 'Standard_DS1_v2'
            },
            'storage_profile': {
                'image_reference': {
                    'publisher': vm_reference['publisher'],
                    'offer': vm_reference['offer'],
                    'sku': vm_reference['sku'],
                    'version': vm_reference['version']
                },
            },
            'network_profile': {
                'network_interfaces': [{
                    'id': nic_id,
                }]
            },
        }


    if __name__ == "__main__":
        run_example()
    ```


    <span data-ttu-id="929f7-129">プログラムの実行が完了したら、サブスクリプション内の仮想マシンを Azure CLI 2.0 で確認します。</span><span class="sxs-lookup"><span data-stu-id="929f7-129">When the program finishes, verify the virtual machine in your subscription with the Azure CLI 2.0:</span></span>


    ```azurecli-interactive

    az vm list --resource-group sampleVmResourceGroup

    ```


    <span data-ttu-id="929f7-130">コードが正しく動作したことを確認したら、CLI で VM とそのリソースを削除します。</span><span class="sxs-lookup"><span data-stu-id="929f7-130">Once you've verified that the code worked, use the CLI to delete the VM and its resources.</span></span>


    ```azurecli-interactive

    az group delete --name sampleVmResourceGroup

    ```
- title: <span data-ttu-id="929f7-131">GitHub リポジトリからの Web アプリのデプロイ</span><span class="sxs-lookup"><span data-stu-id="929f7-131">Deploy a web app from a GitHub repo</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"929f7-132\">このコードは、無料の価格レベルで稼働する新しい [Azure App Service Web アプリ](https://docs.microsoft.com/azure/app-service-web/app-service-web-overview)に、GitHub リポジトリの `master` ブランチから Flask Web アプリケーションをデプロイするものです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-132\">This code deploys a Flask web application from the `master` branch in a GitHub repo in to a new [Azure App Service Web App](https://docs.microsoft.com/azure/app-service-web/app-service-web-overview) running in the free tier.</span></span> \n\n<span data-ttu-id=\"929f7-133\">開始する前に、https://github.com/Azure-Samples/python-docs-hello-world をフォークします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-133\">Before you begin: Fork https://github.com/Azure-Samples/python-docs-hello-world</span></span>\n\n<span data-ttu-id=\"929f7-134\">認証を行います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-134\">Authenticate:</span></span>\n```azcli\naz login\n```\n<span data-ttu-id=\"929f7-135\">リソース グループを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-135\">Create a resource group:</span></span>\n```azurecli-interactive\naz group create -l eastus -n sampleWebResourceGroup\n```\n\n<span data-ttu-id=\"929f7-136\">無料の App Service プランを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-136\">Create a free app service plan:</span></span>\n```azurecli-interactive\naz appservice plan create -g sampleWebResourceGroup -n sampleFreePlan  --sku Free\n```\n\n```python\nfrom azure.mgmt.web import WebSiteManagementClient\nfrom azure.mgmt.web.models import Site, SiteSourceControl, SiteConfig\nfrom azure.common.client_factory import get_client_from_cli_profile\n\nRESOURCE_GROUP_NAME = 'sampleWebResourceGroup'\nSERVICE_PLAN_NAME = 'sampleFreePlanName'\nWEB_APP_NAME = 'sampleflaskapp123'\nREPO_URL = 'GitHub_Repository_URL'\n\n#log in\nweb_client = get_client_from_cli_profile(WebSiteManagementClient)\n\n# get service plan id\nservice_plan = web_client.app_service_plans.get(RESOURCE_GROUP_NAME, SERVICE_PLAN_NAME)\n\n# create a web app\nsiteConfiguration = SiteConfig(\n    python_version='3.4',\n)\nsite_async_operation = web_client.web_apps.create_or_update(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    Site(\n        location='eastus',\n        server_farm_id=service_plan.id,\n        site_config=siteConfiguration\n    ),\n)\n\nsite = site_async_operation.result()\nprint('created webapp: ' + site.default_host_name)\n\n# continuous deployment with GitHub\nsource_control_async_operation = web_client.web_apps.create_or_update_source_control(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    SiteSourceControl(\n        location='GitHub',\n        repo_url= REPO_URL,\n        branch='master'\n    )\n)\n\nsource_control = source_control_async_operation.result()\nprint(\"added source control to: \" + source_control.name + \"azurewebsites.net\")\n```\n\n<span data-ttu-id=\"929f7-137\">ブラウザーを開いてアプリケーションにアクセスします。CLI から次のコマンドを入力してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-137\">Open a browser pointed to the application using the CLI:</span></span>\n```azurecli-interactive\naz appservice web browse --resource-group sampleWebResourceGroup --name YOUR_APP_NAME\n```\n\n<span data-ttu-id=\"929f7-138\">デプロイを検証したら、Web アプリとプランをサブスクリプションから削除します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-138\">Remove the web app and plan from your subscription once you've verified the deployment.</span></span> \n```azurecli-interactive\naz group delete --name sampleWebResourceGroup\n```\n"
- title: <span data-ttu-id="929f7-139">SQL Database への接続</span><span class="sxs-lookup"><span data-stu-id="929f7-139">Connect to a SQL database</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"929f7-140\">このコードは、リモート アクセスを許可するファイアウォール規則を使用して新しい SQL データベースを作成し、Microsoft ODBC ドライバーを使用してそのデータベースに接続するものです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-140\">This code creates a new SQL database with a firewall rule allowing remote access, and then connected to it using the Microsoft ODBC driver.</span></span> <span data-ttu-id=\"929f7-141\">pyodbc は、Linux 上で Microsoft ODBC Driver を使用して SQL データベースに接続します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-141\">Pyodbc uses the Microsoft ODBC Driver on Linux to connect to SQL Databases.</span></span> \n\n<span data-ttu-id=\"929f7-142\">認証を行います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-142\">Authenticate:</span></span>\n```azcli\naz login\n```\n<span data-ttu-id=\"929f7-143\">リソース グループを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-143\">Create a resource group:</span></span>\n```azurecli-interactive\naz group create -l eastus -n azure-sample-group\n```\n\n<span data-ttu-id=\"929f7-144\">SQL サーバーを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-144\">Create a SQL server:</span></span>\n```azurecli-interactive\naz sql server create --admin-password HusH_Sec4et --admin-user mysecretname -l eastus -n samplesqlserver123 -g azure-sample-group\n```\n\n<span data-ttu-id=\"929f7-145\">ファイアウォール規則を追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-145\">Add firewall rule:</span></span>\n```azurecli-interactive\naz sql server firewall-rule create --end-ip-address 167.220.0.235 --name firewall_rule_name_123.123.123.123 --resource-group azure-sample-group --server samplesqlserver123 --start-ip-address 123.123.123.123\n```\n\n<span data-ttu-id=\"929f7-146\">SQL データベースを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-146\">Create a SQL database:</span></span>\n```azurecli-interactive\naz sql db create --name sample-db --resource-group azure-sample-group --server samplesqlserver123\n```\n\n```python\nfrom azure.mgmt.sql import SqlManagementClient\nfrom azure.common.client_factory import get_client_from_cli_profile\nimport pyodbc\n\nLOCATION = 'eastus'\nGROUP_NAME = 'azure-sample-group'\nSERVER_NAME = 'samplesqlserver123'\nDATABASE_NAME = 'sample-db'\nUSER_NAME ='mysecretname'\nPASSWORD='HusH_Sec4et'\n\n# authenticate\nsql_client = get_client_from_cli_profile(SqlManagementClient)\n\n\ndef run_example():\n# Get SQL database\nprint('Get SQL database')\ndatabase = sql_client.databases.get(\n    GROUP_NAME,\n    SERVER_NAME,\n    DATABASE_NAME\n)\nprint(database)\nprint(\"\\n\\n\")\n\n\ndef create_and_insert():\nserver = SERVER_NAME+'.database.windows.net'\ndatabase = DATABASE_NAME\nusername = USER_NAME\npassword = PASSWORD\ndriver = '{ODBC Driver 13 for SQL Server}'\ncnxn = pyodbc.connect(\n    'DRIVER=' + driver + ';PORT=1433;SERVER=' + server + ';PORT=1443;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = cnxn.cursor()\ntsql = \"CREATE TABLE CLOUD (name varchar(255), code int);\"\ntsqlInsert = \"INSERT INTO CLOUD (name, code) VALUES ('Azure', 1); \"\nselectValues = \"SELECT * FROM CLOUD\"\nwith cursor.execute(tsql):\n    print('Successfully created table!')\nwith cursor.execute(tsqlInsert):\n    print('Successfully inserted data into table')\ncursor.execute(selectValues)\nrow = cursor.fetchone()\nwhile row:\n    print(str(row[0]) + \" \" + str(row[1]))\n    row = cursor.fetchone()\ncnxn.commit()\n\nif __name__ == \"__main__\":\nrun_example()\ncreate_and_insert()\n```\n\n<span data-ttu-id=\"929f7-147\">コードが正しく動作することを確認したら、CLI を使用して SQL データベースとそのリソースを削除します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-147\">Once you've verified that the code worked, use the CLI to delete the SQL database and its resources.</span></span>\n\n```azurecli-interactive\naz group delete --name azure-sample-group\n```\n"
- title: <span data-ttu-id="929f7-148">新しいストレージ アカウントへの BLOB の書き込み</span><span class="sxs-lookup"><span data-stu-id="929f7-148">Write a blob into a new storage account</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"929f7-149\">認証を行います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-149\">Authenticate:</span></span>\n```azcli\naz login\n```\n<span data-ttu-id=\"929f7-150\">リソース グループを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-150\">Create a resource group:</span></span>\n```azurecli-interactive\naz group create -l eastus -n sampleStorageResourceGroup\n```\n\n<span data-ttu-id=\"929f7-151\">ストレージ アカウントを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-151\">Create a storage account:</span></span>\n```azurecli-interactive\naz storage account create -n samplestorageaccountname -g sampleStorageResourceGroup -l eastus --sku Standard_RAGRS\n```\n\n<span data-ttu-id=\"929f7-152\">このコードは、[Azure ストレージ アカウント](https://docs.microsoft.com/azure/storage/storage-introduction)を作成し、Python 用 Azure Storage ライブラリを使用して新しい html ファイルをクラウドに作成するものです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-152\">This code creates an [Azure storage account](https://docs.microsoft.com/azure/storage/storage-introduction) and then uses the Azure Storage libraries for Python to create a new html file in the cloud.</span></span> \n```python\nfrom azure.storage import CloudStorageAccount\nfrom azure.storage.blob import PublicAccess\nfrom azure.storage.blob.models import ContentSettings\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.storage import StorageManagementClient\n\nRESOURCE_GROUP = 'sampleStorageResourceGroup'\nSTORAGE_ACCOUNT_NAME = 'samplestorageaccountname'\nCONTAINER_NAME = 'samplecontainername'\n\n# log in\nstorage_client = get_client_from_cli_profile(StorageManagementClient)\n\n# create a public storage container to hold the file\nstorage_keys = storage_client.storage_accounts.list_keys(RESOURCE_GROUP, STORAGE_ACCOUNT_NAME)\nstorage_keys = {v.key_name: v.value for v in storage_keys.keys}\n\nstorage_client = CloudStorageAccount(STORAGE_ACCOUNT_NAME, storage_keys['key1'])\nblob_service = storage_client.create_block_blob_service()\n\nblob_service.create_container(CONTAINER_NAME, public_access=PublicAccess.Container)\n\nblob_service.create_blob_from_bytes(\n    CONTAINER_NAME,\n    'helloworld.html',\n    b'<center><h1>Hello World!</h1></center>',\n    content_settings=ContentSettings('text/html')\n)\n\nprint(blob_service.make_blob_url(CONTAINER_NAME, 'helloworld.html'))\n```\n<span data-ttu-id=\"929f7-153\">コンテンツが正常にアップロードされたことを確認するには、出力された URL に移動します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-153\">To verify content successfully uploaded, navigate to the URL printed.</span></span> \n\n<span data-ttu-id=\"929f7-154\">CLI で次のコマンドを入力して、ストレージ アカウントをクリーンアップします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"929f7-154\">Clean up the storage account using the CLI:</span></span>\n```azurecli-interactive\naz group delete --name sampleStorageResourceGroup\n```\n"
- title: <span data-ttu-id="929f7-155">次の手順</span><span class="sxs-lookup"><span data-stu-id="929f7-155">Next Steps</span></span>
  content: >-
    <span data-ttu-id="929f7-156">「Python 用 Azure ライブラリの概要」を完了しました。</span><span class="sxs-lookup"><span data-stu-id="929f7-156">You've completed "Getting started with Azure libraries for python".</span></span>


    - <span data-ttu-id="929f7-157">Python 用 Azure 管理ライブラリを使用したリソースの管理とタスクの自動化の詳細については、[仮想マシン](python-sdk-azure-web-apps-samples.md)、[Web アプリ](python-sdk-azure-web-apps-samples.md)、[SQL データベース](python-sdk-azure-sql-database-samples.md)のサンプル コードを参照してください。</span><span class="sxs-lookup"><span data-stu-id="929f7-157">To learn more about how to use the Azure management libraries for Python to manage resources and automate tasks, see our sample code for [virtual machines](python-sdk-azure-web-apps-samples.md), [web apps](python-sdk-azure-web-apps-samples.md) and [SQL database](python-sdk-azure-sql-database-samples.md).</span></span>


    - <span data-ttu-id="929f7-158">すべてのパッケージには、[リファレンス](/python/api/overview/azure/?view=azure-python)が提供されています。</span><span class="sxs-lookup"><span data-stu-id="929f7-158">A [reference](/python/api/overview/azure/?view=azure-python) is available for all packages.</span></span>
